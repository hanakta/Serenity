<?php
// üê± –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–¥–∞—á –¥–ª—è Serenity

namespace App\Controllers;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use App\Models\Task;
use App\Services\ValidationService;

class TaskController
{
    private Task $taskModel;
    private ValidationService $validator;

    public function __construct()
    {
        $this->taskModel = new Task();
        $this->validator = new ValidationService();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function index($request, $response)
    {
        $userId = $request->getAttribute('user_id');
        $queryParams = $request->getQueryParams();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        $paginationErrors = $this->validator->validatePagination($queryParams);
        if (!empty($paginationErrors)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏',
                'errors' => $paginationErrors
            ], 400);
        }

        $page = (int) ($queryParams['page'] ?? 1);
        $limit = (int) ($queryParams['limit'] ?? 20);

        // –§–∏–ª—å—Ç—Ä—ã
        $filters = [
            'status' => $queryParams['status'] ?? null,
            'priority' => $queryParams['priority'] ?? null,
            'category' => $queryParams['category'] ?? null,
            'project_id' => $queryParams['project_id'] ?? null,
            'search' => $queryParams['search'] ?? null,
            'due_date_from' => $queryParams['due_date_from'] ?? null,
            'due_date_to' => $queryParams['due_date_to'] ?? null,
            'sort_by' => $queryParams['sort_by'] ?? 'created_at',
            'sort_order' => $queryParams['sort_order'] ?? 'DESC'
        ];

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤—ã –≥–¥–µ –Ω—É–∂–Ω–æ
        if ($filters['status'] && is_string($filters['status'])) {
            $filters['status'] = explode(',', $filters['status']);
        }
        if ($filters['priority'] && is_string($filters['priority'])) {
            $filters['priority'] = explode(',', $filters['priority']);
        }
        if ($filters['category'] && is_string($filters['category'])) {
            $filters['category'] = explode(',', $filters['category']);
        }

        try {
            $tasks = $this->taskModel->getByUserId($userId, $filters, $page, $limit);

            return $this->jsonResponse($response, [
                'success' => true,
                'data' => $tasks,
                'pagination' => [
                    'page' => $page,
                    'limit' => $limit,
                    'total' => count($tasks) // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                ]
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
     */
    public function create($request, $response)
    {
        $userId = $request->getAttribute('user_id');
        $data = $request->getParsedBody();
        $data['user_id'] = $userId;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        $errors = $this->validator->validateTask($data);
        if (!empty($errors)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'errors' => $errors,
                'debug' => [
                    'received_data' => $data,
                    'validation_errors' => $errors
                ]
            ], 400);
        }

        try {
            $task = $this->taskModel->create($data);

            return $this->jsonResponse($response, [
                'success' => true,
                'message' => '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                'data' => $task
            ], 201);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
     */
    public function show($request, $response, array $args)
    {
        $userId = $request->getAttribute('user_id');
        $taskId = $args['id'];

        if (!$this->validator->validateTaskId($taskId)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
            ], 400);
        }

        try {
            $task = $this->taskModel->findById($taskId);

            if (!$task) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                ], 404);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if ($task['user_id'] !== $userId) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
                ], 403);
            }

            return $this->jsonResponse($response, [
                'success' => true,
                'data' => $task
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
     */
    public function update($request, $response, array $args)
    {
        $userId = $request->getAttribute('user_id');
        $taskId = $args['id'];
        $data = $request->getParsedBody();

        if (!$this->validator->validateTaskId($taskId)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
            ], 400);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $errors = $this->validator->validateTaskUpdate($data);
        if (!empty($errors)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'errors' => $errors
            ], 400);
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $existingTask = $this->taskModel->findById($taskId);
            if (!$existingTask) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                ], 404);
            }

            if ($existingTask['user_id'] !== $userId) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
                ], 403);
            }

            $task = $this->taskModel->update($taskId, $data);

            return $this->jsonResponse($response, [
                'success' => true,
                'message' => '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                'data' => $task
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
     */
    public function delete($request, $response, array $args)
    {
        $userId = $request->getAttribute('user_id');
        $taskId = $args['id'];

        if (!$this->validator->validateTaskId($taskId)) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
            ], 400);
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $existingTask = $this->taskModel->findById($taskId);
            if (!$existingTask) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                ], 404);
            }

            if ($existingTask['user_id'] !== $userId) {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
                ], 403);
            }

            $deleted = $this->taskModel->delete($taskId);

            if ($deleted) {
                return $this->jsonResponse($response, [
                    'success' => true,
                    'message' => '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
                ]);
            } else {
                return $this->jsonResponse($response, [
                    'success' => false,
                    'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'
                ], 500);
            }

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
     */
    public function stats($request, $response)
    {
        $userId = $request->getAttribute('user_id');

        try {
            $stats = $this->taskModel->getStats($userId);

            return $this->jsonResponse($response, [
                'success' => true,
                'data' => $stats
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
     */
    public function overdue($request, $response)
    {
        $userId = $request->getAttribute('user_id');

        try {
            $tasks = $this->taskModel->getOverdueTasks($userId);

            return $this->jsonResponse($response, [
                'success' => true,
                'data' => $tasks
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public function today($request, $response)
    {
        $userId = $request->getAttribute('user_id');

        try {
            $tasks = $this->taskModel->getTodayTasks($userId);

            return $this->jsonResponse($response, [
                'success' => true,
                'data' => $tasks
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse($response, [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è JSON –æ—Ç–≤–µ—Ç–æ–≤
     */
    private function jsonResponse($response, array $data, int $statusCode = 200)
    {
        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE));
        return $response->withStatus($statusCode)->withHeader('Content-Type', 'application/json');
    }
}
